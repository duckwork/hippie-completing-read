;;; hippie-completing-read.el --- peace love compl  -*- lexical-binding: t; -*-

;; Copyright (C) 2021 Case Duckworth

;; Author: Case Duckworth <acdw@acdw.net>

;;; License:

;; Everyone is permitted to do whatever with this software, without
;; limitation.  This software comes without any warranty whatsoever,
;; but with two pieces of advice:

;; - Be kind to yourself.

;; - Make good choices.

;;; Commentary:

;; Adapted from https://www.emacswiki.org/emacs/HippieExpand#h5o-11, this
;; allows completing with `hippie-expand' using `completing-read'.

;;; Code:

(require 'cl-lib)
(require 'hippie-exp)

(defgroup hippie-completing-read nil
  "Use Hippie Expansion from a Completing Read interface."
  :group 'hippie-expand
  :group 'completion
  :prefix "hippie-completing-read-")

(defcustom hippie-completing-read-prompt "Hippie: "
  "The prompt to display with `hippie-completing-read-expand-with'."
  :type 'string)

(defcustom hippie-completing-read-function
  'completing-read
  "Function to use to display and select from `hippie-expand' selections.
Should be compatible with `completing-read'."
  :type 'function)

(defun hippie-completing-read-expand-completions
    (&optional hippie-expand-function)
  "Return the full list of possible completions generated by `hippie-expand'.
The optional argument can be generated with `make-hippie-expand-function'."
  (let ((this-command 'hippie-completing-read-expand-completions)
        (last-command last-command)
        (buffer-modified (buffer-modified-p))
        (hippie-expand-function (or hippie-expand-function 'hippie-expand)))
    (cl-letf (((symbol-function 'ding) #'ignore))
      ;; inhibit ding when `hippie-expand' exhausts completions
      (while (progn
               (funcall hippie-expand-function nil)
               (setq last-command 'hippie-completing-read-expand-completions)
               (not (equal he-num -1)))))
    ;; Evaluating the completions modifies the buffer, however we will finish
    ;; up in the same state that we began.
    (set-buffer-modified-p buffer-modified)
    ;; Provide the options in the order in which they are normally generated.
    (delete he-search-string (reverse he-tried-table))))

(defun hippie-completing-read-expand-with (hippie-expand-function)
  "Offer `completing-read' based completion using `hippie-expand'.
The supplied HIPPIE-EXPAND-FUNCTION will provide completion items."
  (let* ((options (hippie-completing-read-expand-completions
                   hippie-expand-function))
         (selection (and options
                         (funcall hippie-completing-read-function
                                  hippie-completing-read-prompt
                                  options))))
    (if selection
        (he-substitute-string selection t)
      (message "No expansion found"))))

;;;###autoload
(defun hippie-completing-read ()
  "Offer `completing-read' based completion for word at point."
  (interactive)
  (hippie-completing-read-expand-with 'hippie-expand))

(provide 'hippie-completing-read)
;;; hippie-completing-read.el ends here
