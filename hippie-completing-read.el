;;; hippie-completing-read.el --- peace love compl  -*- lexical-binding: t; -*-

;; Copyright (C) 2021 Case Duckworth

;; Author: Case Duckworth <acdw@acdw.net>

;;; License:

;; Everyone is permitted to do whatever with this software, without
;; limitation.  This software comes without any warranty whatsoever,
;; but with two pieces of advice:

;; - Be kind to yourself.

;; - Make good choices.

;;; Commentary:

;; Adapted from https://www.emacswiki.org/emacs/HippieExpand#h5o-11, this
;; allows completing with `hippie-expand' using `completing-read'.

;;; Code:

(require 'cl-lib)
(require 'hippie-exp)

(defgroup hippie-completing-read nil
  "Use Hippie Expansion from a Completing Read interface."
  :group 'hippie-expand
  :group 'completion
  :prefix "hippie-completing-read-")

(defcustom hippie-completing-read-prompt "Hippie: "
  "The prompt to display with `hippie-completing-read-expand-with'."
  :type 'string)

(defcustom hippie-completing-read-function 'completing-read
  "Function to use to display and select from `hippie-expand' selections.
Should be compatible with `completing-read'."
  :type 'function)

(defcustom hippie-completing-read-function-parameters '(nil ; predicate
                                                        nil ; require-match
                                                        ;; initial-input
                                                        he-search-string)
  "Further parameters to pass to `hippie-completing-read-function'.
By default, add `he-search-string' (the thing we're completing)
as initial input.

This variable is risky, since its values are evaluated when passed to `hippie-completing-read'."
  :type 'list
  :risky t)

(defcustom hippie-completing-read-cycle-threshold 'inherit
  "Number of expansion candidates needed before using `completing-read'.
Depending on this setting, `hippie-completing-read' may use
cycling, whereby invoking a completion command several times in a
row completes each of the candidates in turn, cyclically, or uses
a completion framework to choose an expansion.

If nil, never cycle.
If t, cycling is always used.
If `inherit', \"inherit\" the value from `completion-cycle-threshold',
which see.
If an integer, cycling is used so long as there are not more completion
candidates than in this number."
  :type '(choice (const :tag "Never cycle" nil)
                 (const :tag "Always cycle" t)
                 (const :tag "Use `completion-cycle-threshold' value.")
                 (integer :tag "Threshold")))

(defun hippie-completing-read-expand-completions
    (&optional hippie-expand-function)
  "Return the full list of possible completions generated by `hippie-expand'.
The optional HIPPIE-EXPAND-FUNCTION argument can be generated
with `make-hippie-expand-function'."
  (let ((this-command 'hippie-completing-read-expand-completions)
        (last-command last-command)
        (buffer-modified (buffer-modified-p))
        (hippie-expand-function (or hippie-expand-function 'hippie-expand)))
    (cl-letf (((symbol-function 'ding) #'ignore))
      ;; inhibit ding when `hippie-expand' exhausts completions
      (while (progn
               (funcall hippie-expand-function nil)
               (setq last-command 'hippie-completing-read-expand-completions)
               (not (equal he-num -1)))))
    ;; Evaluating the completions modifies the buffer, however we will finish
    ;; up in the same state that we began.
    (set-buffer-modified-p buffer-modified)
    ;; Provide the options in the order in which they are normally generated.
    (delete he-search-string (reverse he-tried-table))))

(defun hippie-completing-read-expand-with (hippie-expand-function)
  "Offer `completing-read' based completion using `hippie-expand'.
The supplied HIPPIE-EXPAND-FUNCTION will provide completion items."
  (let ((collection (hippie-completing-read-expand-completions
                     hippie-expand-function))
        (threshold (if (eq hippie-completing-read-cycle-threshold 'inherit)
                       completion-cycle-threshold
                     hippie-completing-read-cycle-threshold)))
    (if collection
        (if (and threshold (or (eq threshold t)
                               (> (length collection) threshold)))
            (let ((selection
                   (apply hippie-completing-read-function
                          hippie-completing-read-prompt
                          collection
                          (mapcar 'eval ; is this safe??? hmmmm
                                  hippie-completing-read-function-parameters))))
              (when selection
                (he-substitute-string selection t)))
          (hippie-expand nil))
      (user-error "No expansion found for %s" he-search-string))))

;;;###autoload
(defun hippie-completing-read ()
  "Offer `completing-read' based completion for word at point."
  (interactive)
  (hippie-completing-read-expand-with 'hippie-expand))

(provide 'hippie-completing-read)
;;; hippie-completing-read.el ends here
